return {
  'ibhagwan/fzf-lua',
  cmd = 'FzfLua',
  opts = function(_, opts)
    local fzf = require 'fzf-lua'
    local config = fzf.config
    local actions = fzf.actions

    -- Quickfix
    config.defaults.keymap.fzf['ctrl-q'] = 'select-all+accept'
    config.defaults.keymap.fzf['ctrl-u'] = 'half-page-up'
    config.defaults.keymap.fzf['ctrl-d'] = 'half-page-down'
    config.defaults.keymap.fzf['ctrl-x'] = 'jump'
    config.defaults.keymap.fzf['ctrl-f'] = 'preview-page-down'
    config.defaults.keymap.fzf['ctrl-b'] = 'preview-page-up'
    config.defaults.keymap.builtin['<c-f>'] = 'preview-page-down'
    config.defaults.keymap.builtin['<c-b>'] = 'preview-page-up'

    -- Trouble
    config.defaults.actions.files['ctrl-t'] = require('trouble.sources.fzf').actions.open

    -- Toggle root dir / cwd
    config.defaults.actions.files['ctrl-r'] = function(_, ctx)
      local cwd_path = nil
      if ctx.cwd == nil then
        cwd_path = vim.fn.expand '%:p:h'
      end

      return fzf.files { cwd = cwd_path }
    end
    config.defaults.actions.files['alt-c'] = config.defaults.actions.files['ctrl-r']
    config.set_action_helpstr(config.defaults.actions.files['ctrl-r'], 'toggle-root-dir')

    local img_previewer ---@type string[]?
    for _, v in ipairs {
      { cmd = 'ueberzug', args = {} },
      { cmd = 'chafa', args = { '{file}', '--format=symbols' } },
      { cmd = 'viu', args = { '-b' } },
      { cmd = 'magick', args = { 'convert', '{file}', 'png:-' } },
    } do
      if vim.fn.executable(v.cmd) == 1 then
        img_previewer = vim.list_extend({ v.cmd }, v.args)
        break
      end
    end

    return {
      'default-title',
      fzf_colors = false,
      fzf_opts = {
        ['--no-scrollbar'] = true,
      },
      defaults = {
        -- formatter = "path.filename_first",
        formatter = 'path.dirname_first',
      },
      oldfiles = {
        include_current_session = true,
      },
      previewers = {
        builtin = {
          extensions = {
            ['png'] = img_previewer,
            ['jpg'] = img_previewer,
            ['jpeg'] = img_previewer,
            ['gif'] = img_previewer,
            ['webp'] = img_previewer,
          },
          ueberzug_scaler = 'fit_contain',
          syntax_limit_b = 1024 * 100,
        },
      },
      -- Custom LazyVim option to configure vim.ui.select
      ui_select = function(fzf_opts, items)
        return vim.tbl_deep_extend('force', fzf_opts, {
          prompt = ' ',
          winopts = {
            title = ' ' .. vim.trim((fzf_opts.prompt or 'Select'):gsub('%s*:%s*$', '')) .. ' ',
            title_pos = 'center',
          },
        }, fzf_opts.kind == 'codeaction' and {
          winopts = {
            layout = 'vertical',
            -- height is number of items minus 15 lines for the preview, with a max of 80% screen height
            height = math.floor(math.min(vim.o.lines * 0.8 - 16, #items + 2) + 0.5) + 16,
            width = 0.5,
            preview = not vim.tbl_isempty(vim.lsp.get_clients { bufnr = 0, name = 'vtsls' }) and {
              layout = 'vertical',
              vertical = 'down:15,border-top',
              hidden = 'hidden',
            } or {
              layout = 'vertical',
              vertical = 'down:15,border-top',
            },
          },
        } or {
          winopts = {
            width = 0.5,
            -- height is number of items, with a max of 80% screen height
            height = math.floor(math.min(vim.o.lines * 0.8, #items + 2) + 0.5),
          },
        })
      end,
      winopts = {
        width = 0.8,
        height = 0.8,
        row = 0.5,
        col = 0.5,
        preview = {
          scrollchars = { '┃', '' },
        },
      },
      files = {
        cwd_prompt = false,
        actions = {
          ['ctrl-i'] = { actions.toggle_ignore },
          ['ctrl-o'] = { actions.toggle_hidden },
        },
      },
      grep = {
        actions = {
          ['ctrl-i'] = { actions.toggle_ignore },
          ['ctrl-o'] = { actions.toggle_hidden },
        },
      },
      lsp = {
        symbols = {
          symbol_hl = function(s)
            return 'TroubleIcon' .. s
          end,
          symbol_fmt = function(s)
            return s:lower() .. '\t'
          end,
          child_prefix = false,
        },
        code_actions = {
          previewer = vim.fn.executable 'delta' == 1 and 'codeaction_native' or nil,
        },
      },
    }
  end,
  config = function(_, opts)
    if opts[1] == 'default-title' then
      -- use the same prompt for all pickers for profile `default-title` and
      -- profiles that use `default-title` as base profile
      local function fix(t)
        t.prompt = t.prompt ~= nil and ' ' or nil
        for _, v in pairs(t) do
          if type(v) == 'table' then
            fix(v)
          end
        end
        return t
      end
      opts = vim.tbl_deep_extend('force', fix(require 'fzf-lua.profiles.default-title'), opts)
      opts[1] = nil
    end
    require('fzf-lua').setup(opts)
  end,
  keys = {
    -- {
    --   '<c-j>',
    --   '<c-j>',
    --   ft = 'fzf',
    --   mode = 't',
    --   nowait = true,
    -- },
    -- {
    --   '<c-k>',
    --   '<c-k>',
    --   ft = 'fzf',
    --   mode = 't',
    --   nowait = true,
    -- },
    -- {
    -- 	"<leader>,",
    -- 	"<cmd>FzfLua buffers sort_mru=true sort_lastused=true<cr>",
    -- 	desc = "Switch Buffer",
    -- },

    -- find
    -- { '<leader>fb', '<cmd>FzfLua buffers sort_mru=true sort_lastused=true<cr>', desc = 'Buffers' },
    -- { '<leader>ft', '<cmd>TodoFzfLua<cr>', desc = 'Todo' },
    -- {
    --   '<leader>fb',
    --   function()
    --     Snacks.picker.grep_buffers()
    --   end,
    --   desc = 'Find Buffers',
    -- },
    --
    -- {
    --   '<leader>fp',
    --   '<cmd>NeovimProjectDiscover<cr>',
    --   desc = 'Projects',
    -- },
    -- {
    --   '<leader>fw',
    --   '<cmd>FzfLua live_grep_native<cr>',
    --   desc = 'Word (cwd)',
    -- },
    -- {
    --   '<leader>fw',
    --   '<cmd>Telescope current_buffer_fuzzy_find<cr>',
    --   desc = 'Word',
    -- },
    -- { '<leader>fa', '<cmd>FzfLua files<cr>', desc = 'FzfLua: Find Files' },
    -- { '<leader>fg', '<cmd>FzfLua git_files<cr>', desc = 'Find Files (git-files)' },
    -- { '<leader>fr', '<cmd>FzfLua oldfiles<cr>', desc = 'Recent' },
    -- { '<leader>fd', '<cmd>FzfLua lsp_definitions<cr>', desc = 'FzfLua: Definitions' },
    -- { '<leader>fq', '<cmd>FzfLua colorschemes<cr>', desc = 'Colorschemes' },
    -- { '<leader>s]', '<cmd>FzfLua registers<cr>', desc = 'Registers' },
    -- { '<leader>fe', '<cmd>Telescope current_buffer_fuzzy_find<cr>', desc = 'Find Text in Buffer' },
    -- {
    --   '<leader>fc',
    --   function()
    --     require('fzf-lua').files { cwd = vim.fn.stdpath 'config' }
    --   end,
    --   desc = 'Find Config File',
    -- },
    -- {
    --   '<leader>fF',
    --   function()
    --     require('fzf-lua').files { cwd = vim.fn.expand '%:p:h' }
    --   end,
    --   desc = 'Find Files (cwd)',
    -- },
    -- {
    --   '<leader>fR',
    --   function()
    --     require('fzf-lua').oldfiles { cwd = vim.uv.cwd() }
    --   end,
    --   desc = 'Recent (cwd)',
    -- },

    -- search
    -- { "<leader>sa", "<cmd>FzfLua autocmds<cr>", desc = "Auto Commands" },
    -- { '<leader>sb', '<cmd>FzfLua grep_curbuf<cr>', desc = 'Search Buffer' },
    -- { "<leader>sc", "<cmd>FzfLua command_history<cr>", desc = "Command History" },
    -- { "<leader>sC", "<cmd>FzfLua commands<cr>", desc = "Commands" },
    -- { "<leader>sd", "<cmd>FzfLua diagnostics_document<cr>", desc = "Document Diagnostics" },
    -- { "<leader>sD", "<cmd>FzfLua diagnostics_workspace<cr>", desc = "Workspace Diagnostics" },
    -- { "<leader>sg", "<cmd>FzfLua live_grep<cr>", desc = "Grep (Root Dir)" },
    -- {
    --   "<leader>sG",
    --   function()
    --     require("fzf-lua").live_grep({ cwd = vim.uv.cwd() })
    --   end,
    --   desc = "Grep (cwd)",
    -- },
    -- { "<leader>sh", "<cmd>FzfLua help_tags<cr>", desc = "Help Pages" },
    -- { "<leader>sH", "<cmd>FzfLua highlights<cr>", desc = "Search Highlight Groups" },
    -- { "<leader>sj", "<cmd>FzfLua jumps<cr>", desc = "Jumplist" },
    -- { "<leader>sk", "<cmd>FzfLua keymaps<cr>", desc = "Key Maps" },
    -- { "<leader>sl", "<cmd>FzfLua loclist<cr>", desc = "Location List" },
    -- { "<leader>sM", "<cmd>FzfLua man_pages<cr>", desc = "Man Pages" },
    -- { "<leader>sm", "<cmd>FzfLua marks<cr>", desc = "Jump to Mark" },
    -- { "<leader>sR", "<cmd>FzfLua resume<cr>", desc = "Resume" },
    -- { "<leader>sq", "<cmd>FzfLua quickfix<cr>", desc = "Quickfix List" },
    -- { "<leader>sw", "<cmd>FzfLua grep_cword<cr>", desc = "Word (Root Dir)" },
    -- {
    --   "<leader>sW",
    --   function()
    --     require("fzf-lua").grep_cword({ cwd = vim.fn.expand("%:p:h") })
    --   end,
    --   desc = "Word (cwd)",
    -- },
    -- { "<leader>sw", "<cmd>FzfLua grep_visual<cr>", mode = "v", desc = "Selection (Root Dir)" },
    -- {
    --   "<leader>sW",
    --   function()
    --     require("fzf-lua").grep_visual({ cwd = vim.fn.expand("%:p:h") })
    --   end,
    --   mode = "v",
    --   desc = "Selection (cwd)",
    -- },
    -- {
    --   "<leader>ss",
    --   function()
    --     require("fzf-lua").lsp_document_symbols({
    --       regex_filter = symbols_filter,
    --     })
    --   end,
    --   desc = "Goto Symbol",
    -- },
    -- {
    --   "<leader>sS",
    --   function()
    --     require("fzf-lua").lsp_live_workspace_symbols({
    --       regex_filter = symbols_filter,
    --     })
    --   end,
    --   desc = "Goto Symbol (Workspace)",
    -- },
  },
}
